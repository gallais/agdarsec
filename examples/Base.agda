open import Level using (Level)

module Base (l : Level) where

open import Level.Bounded

import Data.Nat as Nat
open import Data.Nat.Properties
open import Data.Char.Base as Char using (Char)
import Data.Empty as Empty
open import Data.Product as Product using (_,_; proj‚ÇÅ)

open import Data.List.Base as List using ([]; _‚à∑_)
open import Data.List.Categorical as List
open import Data.List.Sized.Interface

open import Data.String as String
open import Data.Vec as Vec using ()
open import Data.Bool
open import Data.Maybe as Maybe using (nothing; just; maybe‚Ä≤)
open import Data.Maybe.Categorical as MaybeCat
open import Data.Sum
open import Function
open import Category.Monad
open import Category.Monad.State
open import Relation.Nullary
open import Relation.Nullary.Decidable

open import Relation.Unary using (IUniversal; _‚áí_) public
open import Relation.Binary.PropositionalEquality.Decidable public
open import Induction.Nat.Strong hiding (<-lower ; ‚â§-lower) public

open import Data.Subset                  public
open import Text.Parser.Types            public
open import Text.Parser.Position         public
open import Text.Parser.Combinators      public
open import Text.Parser.Combinators.Char public
open import Text.Parser.Monad public
open Agdarsec‚Ä≤ public

infix 0 _!
data Singleton {a} {A : Set a} : A ‚Üí Set a where
  _! : (a : A) ‚Üí Singleton a

record Tokenizer (A : Set‚â§ l) : Set (level (level‚â§ A)) where
  constructor mkTokenizer
  field tokenize : List.List Char ‚Üí List.List (theSet A)

  fromText : String ‚Üí List.List (theSet A)
  fromText = tokenize ‚àò String.toList

instance
  tokChar : Tokenizer [ Char ]
  tokChar = mkTokenizer id

record RawMonadRun (M : Set l ‚Üí Set l) : Set (Level.suc l) where
  field runM : ‚àÄ {A} ‚Üí M A ‚Üí List.List A
open RawMonadRun

instance

  Agdarsec‚Ä≤M : RawMonad (Agdarsec {l} ‚ä§ ‚ä•)
  Agdarsec‚Ä≤M  = Agdarsec‚Ä≤.monad

  Agdarsec‚Ä≤M0 : RawMonadZero (Agdarsec {l} ‚ä§ ‚ä•)
  Agdarsec‚Ä≤M0 = Agdarsec‚Ä≤.monadZero

  Agdarsec‚Ä≤M+ : RawMonadPlus (Agdarsec {l} ‚ä§ ‚ä•)
  Agdarsec‚Ä≤M+ = Agdarsec‚Ä≤.monadPlus

  runMaybe : RawMonadRun Maybe.Maybe
  runMaybe = record { runM = maybe‚Ä≤ (_‚à∑ []) [] }

  runList : RawMonadRun List.List
  runList = record { runM = id }

  runResult : {E : Set l} ‚Üí RawMonadRun (Result E)
  runResult = record { runM = result (const []) (const []) (_‚à∑ []) }

  runStateT : ‚àÄ {M A} {{ùïÑ : RawMonadRun M}} ‚Üí RawMonadRun (StateT (Lift ([ Position ] √ó List A)) M)
  runStateT {{ùïÑ}} .RawMonadRun.runM =
    List.map proj‚ÇÅ
    ‚àò‚Ä≤ runM ùïÑ
    ‚àò‚Ä≤ (_$ lift (start , []))

  monadMaybe : RawMonad {l} Maybe.Maybe
  monadMaybe = MaybeCat.monad

  plusMaybe : RawMonadPlus {l} Maybe.Maybe
  plusMaybe = MaybeCat.monadPlus

  monadList : RawMonad {l} List.List
  monadList = List.monad

  plusList : RawMonadPlus {l} List.List
  plusList = List.monadPlus

module _ {P : Parameters l} (open Parameters P)
         {{t : Tokenizer Tok}}
         {{ùïÑ : RawMonadPlus M}}
         {{ùïä : Sized Tok Toks}}
         {{ùïÉ : ‚àÄ {n} ‚Üí Subset (theSet (Vec Tok n)) (theSet (Toks n))}}
         {{‚Ñù  : RawMonadRun M}} where

 private module ùïÑ = RawMonadPlus ùïÑ
 private module ùïÉ{n} = Subset (ùïÉ {n})

 _‚àà_ : ‚àÄ {A : Set‚â§ l} ‚Üí String ‚Üí ‚àÄ[ Parser P A ] ‚Üí Set (level (level‚â§ A))
 s ‚àà A =
  let input = Vec.fromList $ Tokenizer.fromText t s
      parse = runParser A (n‚â§1+n _) (lift $ ùïÉ.into input)
      check = Œª s ‚Üí if ‚åä Success.size s Nat.‚âü 0 ‚åã
                    then just (Success.value s) else nothing
  in case List.TraversableM.mapM MaybeCat.monad check $ runM ‚Ñù parse of Œª where
       (just (a ‚à∑ _)) ‚Üí Singleton (lower a)
       _              ‚Üí Lift ‚ä•
