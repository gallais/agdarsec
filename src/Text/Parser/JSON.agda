-- Parser based on RFC 8259: https://tools.ietf.org/html/rfc8259

{-# OPTIONS --without-K --safe #-}

open import Text.Parser.Types.Core using (Parameters)

module Text.Parser.JSON {l} {P : Parameters l} where

open import Category.Monad using (RawMonadPlus)

open import Data.Bool.Base using (Bool; true; false)
open import Data.Char.Base using (Char)
open import Data.Float.Base using (Float)
open import Data.List.Base using (List; []; _‚à∑_)
import Data.List.NonEmpty as List‚Å∫
open import Data.List.Sized.Interface
open import Data.Maybe.Base using (maybe‚Ä≤)
open import Data.Product using (_√ó_; uncurry)
open import Data.String.Base using (String)
open import Data.Subset using (Subset; into)
open import Data.Unit.Base using (‚ä§)

open import Induction.Nat.Strong as Box using (‚ñ°_; fix)

open import Function.Base using (_$_; _‚àò‚Ä≤_)

open import Relation.Unary
open import Relation.Binary.PropositionalEquality.Decidable using (DecidableEquality)

open import Level.Bounded using (theSet; [_])
open import Text.Parser.Types P
open import Text.Parser.Combinators {P = P}
open import Text.Parser.Combinators.Char {P = P}
open import Text.Parser.Combinators.Numbers {P = P}
open Parameters P


module JSON where

  -- I wish I could use a sized type here but unfortunately they're not
  -- considered safe anymore.
  data JSON : Set where
    null   : JSON
    bool   : Bool ‚Üí JSON
    number : Float ‚Üí JSON
    string : String ‚Üí JSON
    array  : List JSON ‚Üí JSON
    object : List (String √ó JSON) ‚Üí JSON

open JSON using (JSON)

module _ {{ùïÑ : RawMonadPlus M}}
         {{ùïä : Sized Tok Toks}}
         {{ùîª : DecidableEquality (theSet Tok)}}
         {{‚ÑÇ : Subset Char (theSet Tok)}}
         {{‚ÑÇ‚Åª : Subset (theSet Tok) Char}}
         where


-- We assume that when we call a subparser all of the whitespace before
-- the potential token has been consumed already. So we should systematically
-- consume spaces after the tokens we have happily recognised.

-- Structural characters

  structuralChar : Char ‚Üí ‚àÄ[ Parser [ ‚ä§ ] ]
  structuralChar c = _ <$ (char c <&? box spaces)

  beginArray     = structuralChar '['
  beginObject    = structuralChar '{'
  endArray       = structuralChar ']'
  endObject      = structuralChar '}'
  nameSeparator  = structuralChar ':'
  valueSeparator = structuralChar ','

-- Subparser for members, provided a subparser for smaller JSON objects
-- According to the RFC:
-- member = string name-separator value

  member : ‚àÄ[ ‚ñ° Parser [ JSON ] ‚áí Parser [ String √ó JSON ] ]
  member rec = stringLiteral <&? box spaces
             <&> box (nameSeparator &> rec)

-- Subparser for JSON objects, provided a subparser for smaller JSON objects
-- According to the RFC:
-- object = begin-object [ member *( value-separator member ) ] end-object

  object : ‚àÄ[ ‚ñ° Parser [ JSON ] ‚áí Parser [ List (String √ó JSON) ] ]
  object rec =
    maybe‚Ä≤ (uncurry Œª a mas ‚Üí a ‚à∑ maybe‚Ä≤ List‚Å∫.toList [] mas) []
    <$> (beginObject
         &?> box (member rec <&?> box (list‚Å∫ (valueSeparator &> box (member rec))))
         <& box endObject)

-- Subparser for JSON arrays, provided a subparser for smaller JSON objects
-- According to the RFC:
-- array = begin-array [ value *( value-separator value ) ] end-array

  array : ‚àÄ[ ‚ñ° Parser [ JSON ] ‚áí Parser [ List JSON ] ]
  array rec =
    maybe‚Ä≤ (uncurry Œª a mas ‚Üí a ‚à∑ maybe‚Ä≤ List‚Å∫.toList [] mas) []
    <$> (beginArray
         &?> lift2l (Œª p q ‚Üí p <&?> box q) rec (list‚Å∫ (valueSeparator &> rec))
         <& box endArray)

-- Parsing JSON values
  value : ‚àÄ[ Parser [ JSON ] ]
  value = (spaces ?&>_) $ fix (Parser [ JSON ]) $ Œª rec ‚Üí
    alts $ (JSON.null       <$  text "null"   <&? box spaces)
         ‚à∑ (JSON.bool true  <$  text "true"   <&? box spaces)
         ‚à∑ (JSON.bool false <$  text "false"  <&? box spaces)
         ‚à∑ (JSON.number     <$> decimalFloat  <&? box spaces)
         ‚à∑ (JSON.string     <$> stringLiteral <&? box spaces)
         ‚à∑ (JSON.array      <$> array rec)
         ‚à∑ (JSON.object     <$> object rec)
         ‚à∑ []
