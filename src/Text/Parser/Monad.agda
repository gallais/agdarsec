module Text.Parser.Monad where

open import Level using (Level)
open import Level.Bounded as Level‚â§ hiding (map)

open import Data.Char.Base using (Char)
open import Data.List.Base as List using ([]; _‚à∑_; drop)
open import Data.Maybe.Base as Maybe using (nothing; just; maybe‚Ä≤)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ; map‚ÇÅ; map‚ÇÇ)

open import Data.Subset using (Subset; into)
open import Function.Base using (_‚àò‚Ä≤_; _$‚Ä≤_)

open import Category.Functor
open import Category.Applicative
open import Category.Monad

open import Function.Identity.Categorical as Id using (Identity)
open import Category.Monad.State

open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; subst)

open import Relation.Unary
open import Text.Parser.Types
open import Text.Parser.Position

private
  variable
    e a b l : Level
    E : Set e
    A : Set a
    B : Set b

--------------------------------------------------------------------------------
-- RESULTT

data Result (E : Set e) (A : Set a) : Set (a Level.‚äî e) where
  SoftFail : E ‚Üí Result E A
  HardFail : E ‚Üí Result E A
  Value    : A ‚Üí Result E A

result : (soft hard : E ‚Üí B) (val : A ‚Üí B) ‚Üí Result E A ‚Üí B
result soft hard val = Œª where
  (SoftFail e) ‚Üí soft e
  (HardFail e) ‚Üí hard e
  (Value v)    ‚Üí val v

fromMaybe : E ‚Üí Maybe.Maybe A ‚Üí Result E A
fromMaybe = maybe‚Ä≤ Value ‚àò‚Ä≤ SoftFail

ResultT : Set‚â§ l ‚Üí           -- Error
          (Set l ‚Üí Set l) ‚Üí -- Monad
          (Set l ‚Üí Set l)
ResultT E M A = M (Result (Lift E) A)

Result-monadT : ‚àÄ (E : Set‚â§ l) {M} ‚Üí RawMonad M ‚Üí RawMonad (ResultT E M)
Result-monadT E M = record
  { return = M.pure ‚àò‚Ä≤ Value
  ; _>>=_  = Œª m f ‚Üí m M.>>= result (M.pure ‚àò‚Ä≤ SoftFail) (M.pure ‚àò‚Ä≤ HardFail) f
  } where module M = RawMonad M

Result-monad : (E : Set‚â§ l) ‚Üí RawMonad (Result (Lift E))
Result-monad E = Result-monadT E Id.monad

--------------------------------------------------------------------------------
-- AGDARSECT

AgdarsecT : Set‚â§ l ‚Üí           -- Error
            Set‚â§ l ‚Üí           -- Annotation
            (Set l ‚Üí Set l) ‚Üí -- Monad
            (Set l ‚Üí Set l)
AgdarsecT E Ann M = StateT (Lift ([ Position ] √ó List Ann)) (ResultT E M)

Agdarsec : (E : Set‚â§ l) (Ann : Set‚â§ l) ‚Üí (Set l ‚Üí Set l)
Agdarsec E Ann = AgdarsecT E Ann Identity

module AgdarsecT
        (E Ann : Set‚â§ l) {M : Set l ‚Üí Set l}
        (ùïÑ : RawMonad M)
        (ùïä : Subset (theSet ([ Position ] √ó List Ann)) (theSet E))
        where

  private module ùïÑ = RawMonad ùïÑ

  monadT : RawMonad (AgdarsecT E Ann M)
  monadT = StateTMonad _ (Result-monadT E ùïÑ)

  applicative : RawApplicative (AgdarsecT E Ann M)
  applicative = RawMonad.rawIApplicative monadT

  applicativeZero : RawApplicativeZero (AgdarsecT E Ann M)
  applicativeZero = record
    { applicative = applicative
    ; ‚àÖ           = ùïÑ.pure ‚àò‚Ä≤ SoftFail ‚àò‚Ä≤ Level‚â§.map (into ùïä)
    }

  monadZero : RawMonadZero (AgdarsecT E Ann M)
  monadZero = record
    { monad           = monadT
    ; applicativeZero = applicativeZero
    }

  alternative : RawAlternative (AgdarsecT E Ann M)
  alternative = record
    { applicativeZero = applicativeZero
    ; _‚à£_             = Œª ma‚ÇÅ ma‚ÇÇ s ‚Üí ma‚ÇÅ s ùïÑ.>>= Œª where
        (SoftFail _) ‚Üí ma‚ÇÇ s
        r            ‚Üí ùïÑ.pure r
    }

  monadPlus : RawMonadPlus (AgdarsecT E Ann M)
  monadPlus = record
    { monad       = monadT
    ; alternative = alternative
    }

  monadState : RawMonadState (Lift ([ Position ] √ó List Ann)) (AgdarsecT E Ann M)
  monadState = StateTMonadState _ (Result-monadT E ùïÑ)

  private module ST = RawMonadState monadState

  getPosition : AgdarsecT E Ann M (Lift [ Position ])
  getPosition = Level‚â§.map proj‚ÇÅ ST.<$> ST.get

  getAnnotations : AgdarsecT E Ann M (Lift (List Ann))
  getAnnotations = Level‚â§.map proj‚ÇÇ ST.<$> ST.get

  withAnnotation : ‚àÄ {A} ‚Üí theSet Ann ‚Üí AgdarsecT E Ann M A ‚Üí AgdarsecT E Ann M A
  withAnnotation c ma = let open ST in do
    ST.modify (Level‚â§.map $‚Ä≤ map‚ÇÇ (c ‚à∑_))
    a ‚Üê ma
    ST.modify (Level‚â§.map $‚Ä≤ map‚ÇÇ (drop 1))
    ST.pure a

  recordChar : Char ‚Üí AgdarsecT E Ann M (Lift ‚ä§)
  recordChar c = _ ST.<$ ST.modify (Level‚â§.map $‚Ä≤ map‚ÇÅ (update c))

  -- Commiting to a branch makes all the failures in that branch hard failures
  -- that we cannot recover from
  commit : ‚àÄ {A} ‚Üí AgdarsecT E Ann M A ‚Üí AgdarsecT E Ann M A
  commit m s = result HardFail HardFail Value ùïÑ.<$> m s

  param : ‚àÄ Tok Toks recTok ‚Üí Parameters l
  param Tok Toks recTok = record
    { Tok         = Tok
    ; Toks        = Toks
    ; M           = AgdarsecT E Ann M
    ; recordToken = recTok
    }

  chars : Parameters l
  chars = param [ Char ] (Vec [ Char ]) recordChar

module Agdarsec l (E Ann : Set‚â§ l) (ùïä : Subset (theSet ([ Position ] √ó List Ann)) (theSet E)) where

  private module M = AgdarsecT E Ann Id.monad ùïä
  open M public renaming (monadT to monad) hiding (commit)

  module _ {Tok Toks recTok} where

    private P = param Tok Toks recTok
    commit : {A : Set‚â§ l} ‚Üí ‚àÄ[ Parser P A ‚áí Parser P A ]
    runParser (commit p) m‚â§n s = M.commit (runParser p m‚â§n s)

module Agdarsec‚Ä≤ {l : Level} where

  open Agdarsec l ‚ä§ ‚ä• _ public

  vec : Set‚â§ l ‚Üí Parameters l
  vec Tok = record
    { Tok         = Tok
    ; Toks        = Vec Tok
    ; M           = Agdarsec ‚ä§ ‚ä•
    ; recordToken = Œª _ ‚Üí M.pure _
    } where module M = RawMonad monad
