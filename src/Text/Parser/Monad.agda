module Text.Parser.Monad where

open import Level using (Level)
open import Level.Bounded as Level‚â§ hiding (map)

open import Data.Char.Base using (Char)
open import Data.List.Base as List using ([]; _‚à∑_; drop)
open import Data.Maybe.Base as Maybe using (nothing; just; maybe‚Ä≤)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ; map‚ÇÅ; map‚ÇÇ)
open import Data.String.Base using (String)
open import Data.Text.Sized using (Text)

open import Data.Subset using (Subset; into)
open import Function.Base using (_‚àò‚Ä≤_; _$‚Ä≤_)

open import Effect.Functor
open import Effect.Applicative
open import Effect.Monad
open import Effect.Empty
open import Effect.Choice

open import Function.Identity.Effectful as Id using (Identity)
open import Effect.Monad.State.Transformer as StateT
  using (StateT; mkStateT; runStateT; RawMonadState)

open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; subst)

open import Relation.Unary
open import Text.Parser.Types.Core
open import Text.Parser.Types
open import Text.Parser.Position
open import Text.Parser.Monad.Result

private
  variable
    l : Level

--------------------------------------------------------------------------------
-- AGDARSECT

AgdarsecT : Set‚â§ l ‚Üí           -- Error
            Set‚â§ l ‚Üí           -- Annotation
            (Set l ‚Üí Set l) ‚Üí -- Monad
            (Set l ‚Üí Set l)
AgdarsecT E Ann M = StateT (Lift ([ Position ] √ó List Ann)) (ResultT E M)

Agdarsec : (E : Set‚â§ l) (Ann : Set‚â§ l) ‚Üí (Set l ‚Üí Set l)
Agdarsec E Ann = AgdarsecT E Ann Identity

module AgdarsecT
        (E Ann : Set‚â§ l) {M : Set l ‚Üí Set l}
        (ùïÑ : RawMonad M)
        (ùïä : Subset (theSet ([ Position ] √ó List Ann)) (theSet E))
        where

  private module ùïÑ = RawMonad ùïÑ

  monadT : RawMonad (AgdarsecT E Ann M)
  monadT = StateT.monad (Result-monadT E ùïÑ)

  applicative : RawApplicative (AgdarsecT E Ann M)
  applicative = RawMonad.rawApplicative monadT

  empty : RawEmpty (AgdarsecT E Ann M)
  empty = record
    { empty = mkStateT (ùïÑ.pure ‚àò‚Ä≤ SoftFail ‚àò‚Ä≤ Level‚â§.map (into ùïä))
    }

  applicativeZero : RawApplicativeZero (AgdarsecT E Ann M)
  applicativeZero = record
    { rawApplicative = applicative
    ; rawEmpty = empty
    }

  monadZero : RawMonadZero (AgdarsecT E Ann M)
  monadZero = record
    { rawMonad = monadT
    ; rawEmpty = empty
    }

  choice : RawChoice (AgdarsecT E Ann M)
  choice = StateT.choice (ResultT-choice E ùïÑ)

  alternative : RawAlternative (AgdarsecT E Ann M)
  alternative = record
    { rawApplicativeZero = applicativeZero
    ; rawChoice = choice
    }

  monadPlus : RawMonadPlus (AgdarsecT E Ann M)
  monadPlus = record
    { rawMonadZero = monadZero
    ; rawChoice = choice
    }

  monadState : RawMonadState (Lift ([ Position ] √ó List Ann)) (AgdarsecT E Ann M)
  monadState = StateT.monadState (Result-monadT E ùïÑ)

  private
    module ST where
      open RawMonad monadT public
      open RawMonadState monadState public

  getPosition : AgdarsecT E Ann M (Lift [ Position ])
  getPosition = Level‚â§.map proj‚ÇÅ ST.<$> ST.get

  getAnnotations : AgdarsecT E Ann M (Lift (List Ann))
  getAnnotations = Level‚â§.map proj‚ÇÇ ST.<$> ST.get

  withAnnotation : ‚àÄ {A} ‚Üí theSet Ann ‚Üí AgdarsecT E Ann M A ‚Üí AgdarsecT E Ann M A
  withAnnotation c ma = let open ST in do
    modify (Level‚â§.map $‚Ä≤ map‚ÇÇ (c ‚à∑_))
    a ‚Üê ma
    modify (Level‚â§.map $‚Ä≤ map‚ÇÇ (drop 1))
    pure a

  recordChar : Char ‚Üí AgdarsecT E Ann M (Lift ‚ä§)
  recordChar c = _ ST.<$ ST.modify (Level‚â§.map $‚Ä≤ map‚ÇÅ (update c))

  -- Commiting to a branch makes all the failures in that branch hard failures
  -- that we cannot recover from
  commit : ‚àÄ {A} ‚Üí AgdarsecT E Ann M A ‚Üí AgdarsecT E Ann M A
  commit m = mkStateT Œª s ‚Üí result HardFail HardFail Value ùïÑ.<$> runStateT m s

  param : ‚àÄ Tok Toks recTok ‚Üí Parameters l
  param Tok Toks recTok = record
    { Tok         = Tok
    ; Toks        = Toks
    ; M           = AgdarsecT E Ann M
    ; recordToken = recTok
    }

  chars : Parameters l
  chars = param [ Char ] (Vec [ Char ]) recordChar

  raw : Parameters l
  raw = param [ Char ] (Œª n ‚Üí [ Text n ]) recordChar

module Agdarsec l (E Ann : Set‚â§ l) (ùïä : Subset (theSet ([ Position ] √ó List Ann)) (theSet E)) where

  private module M = AgdarsecT E Ann Id.monad ùïä
  open M public renaming (monadT to monad) hiding (commit)

  module _ {Tok Toks recTok} where

    private P = param Tok Toks recTok
    commit : {A : Set‚â§ l} ‚Üí ‚àÄ[ Parser P A ‚áí Parser P A ]
    runParser (commit p) m‚â§n s = M.commit (runParser p m‚â§n s)

module Agdarsec‚Ä≤ {l : Level} where

  open Agdarsec l ‚ä§ ‚ä• _ public

  vec : Set‚â§ l ‚Üí Parameters l
  vec Tok = record
    { Tok         = Tok
    ; Toks        = Vec Tok
    ; M           = Agdarsec ‚ä§ ‚ä•
    ; recordToken = Œª _ ‚Üí M.pure _
    } where module M = RawMonad monad

  txt : Set‚â§ l ‚Üí Parameters l
  txt Tok = record
    { Tok         = Tok
    ; Toks        = Œª n ‚Üí [ Text n ]
    ; M           = Agdarsec ‚ä§ ‚ä•
    ; recordToken = Œª _ ‚Üí M.pure _
    } where module M = RawMonad monad
